<!DOCTYPE html>
<html>
<head>
<meta http-equiv="content-type" content="text-html; charset=utf-8"/>
<script type="text/javascript" src="../JSC/jquery-latest.min.js"></script>
<script type="text/javascript" src="../JSC/JSCharting.js"></script>



		<title>JSCharting  Map Data Browser Chart</title>
		  <style type="text/css">/*CSS*/</style>
	</head>
	<body>
	<select id="Countries" onchange="selectCountry();">
    </select>
    <select id="Provinces" onchange=" selectProvince();">
    </select>
    <select id="Regions" onchange=" selectRegion();">
    </select>
    <input id="zoomBtn" type="button" value=" 200%" onclick="toggleZoom()"/>
    <div id="cc" style="width: 640px; height: 400px">
</div>
	
<script type="text/javascript">
/*
Loads the digital list of available maps and displays them.
Learn how to:

  - View all available maps.
*/
// JS
var chartConfig = {
  targetElement: 'cc',
  type: 'map',
  height: 400,
  defaultPointLabelVisible: true,
  legendVisible: false,
  defaultPointTooltip: '%mapCode<br/>%name<br/>%region',
  series: [
    {
      defaultPointStatesSelect: {  outlineColor: 'white',  outlineWidth: 1}
    }
  ]
};
var mapDataIndex;
var $Countries;
var $Provinces;
var $Regions;
var paletteIndex = 0;
var palette = JSC.getPalette(0);
var chart;

$.getScript( 'resources/mapDataIndex.js' )
    .done(function( script, textStatus ) {
        var countryOptions = []
        mapDataIndex=JSC.bundle.mapDataIndex;
        $Countries = $('#Countries');
        $Provinces = $('#Provinces');
        $Regions = $('#Regions');
        populateCountries();
        selectCountry();

        function populateCountries(){
            for(var cID in mapDataIndex){
                countryOptions.push('<option value="'+cID+'">'+mapDataIndex[cID].name+' ('+cID+')</option>');
            }
            countryOptions.sort();

            $Countries.find('option').remove().end().append(countryOptions.join(''));
        }
    })
    .fail(function( jqxhr, settings, exception ) {
        console.log( "Cannot find the resources/mapDataIndex.js file. : "+exception );
    });



function updateChart(id){

    chartConfig.series[0].map = id;
    chartConfig.series[0].name = mapDataIndex[id].name;
    chartConfig.series[0].palette =JSCL.palettes.colorToPalette(palette[paletteIndex++%palette.length],{saturation:.3,hue:.05,lightness:.5},10,4);
    chart = new JSC.Chart(chartConfig);

}


function selectCountry(){
    var countryId = $Countries.val();
    updateChart(countryId);
    populateProvinces(countryId);

    function populateProvinces(id){
        $Provinces.find('option').remove().end().append('<option value="ALL">Select a province</option>');
        $Regions.find('option').remove().end().append('<option value="ALL">Select a region</option>');
        var data = mapDataIndex[id].provinces;

        //Make an array of province options to sort
        var tmpProvArr = [];
        for(var pID in data){
            tmpProvArr.push('<option value="'+pID+'">'+data[pID].name+'</option>')
        }
        tmpProvArr.sort();
        $Provinces.append(tmpProvArr.join(''));

        if(data = mapDataIndex[id].regions){
            data.sort();
            for (var i = 0, iLen = data.length; i < iLen; i++) {
                var obj = data[i];
                $Regions.append('<option value="'+obj+'">'+obj+'</option>');
            }
        }else{
            $Regions.find('option').remove().end().append('<option value="ALL">Regions not available</option>');
        }
    }
}

function selectProvince(){
    //Reset region dropdown
    $Regions.val('ALL');
    var provPoint,provinceVal = $Provinces.val();
    if(provinceVal==="ALL"){  chart.zoom(1);  updateZoomState(0); }
    else if(provPoint = chart.get(provinceVal)){  provPoint.zoomTo(); }
}
function selectRegion(){

    var regionProvs,regionsVal = $Regions.val();
    //Reset province dropdown
    $Provinces.val('ALL');
    updateZoomState(0);
   if(regionsVal==="ALL"){ chart.zoom(1); }
    else if(regionProvs = chart.get('region:'+regionsVal)){
       chart.zoom(1,{animation:false});
       setTimeout(function(){
           for (var i = 0, iLen = regionProvs.length; i < iLen; i++) {
               var provPoint = regionProvs[i];
               if(i===0){ provPoint.select(true);}else{ provPoint.select(true,true);}
           }
       },10)
    }
}

var zoomState = 0;
function toggleZoom(){

    //Reset province dropdown
    $Provinces.val('ALL');
    if(zoomState ===0){  updateZoomState(1);  chart.zoom(2); }else{  updateZoomState(0);  chart.zoom(1); }

}
function updateZoomState(state){
    if(state===0){  $('#zoomBtn').val('200%');zoomState=0; }else if(state===1){  $('#zoomBtn').val('100%');  zoomState=1; }
}


</script>
	</body>
</html>